from WeightedGraph import WeightedGraph
from WeightedTree import WeightedTree
dirPath = "/home/cps420/public_html/doc/Now/A/Tests/"

def main():
  """
  Main test program helps debugging the MST algorithm, but does not grade the program
  """
  # Run test files to check MST function
  print("\n=======================  TEST ISSPANNINGTREE   =======================")

  testMST("disconnected",0)
  testMST("tree2",4)
  testMST("tree4",6)
  testMST("graph4-1",9)
  testMST("graph4-2",7)
  testMST("graph4-3",12)
  testMST("graph8-1",29)
  testMST("graph8-2",8)
  testMST("graph10",18)


def testMST(graphfile, MSTweight):
  """
  Reads a graph from a file and tests whether 
  the graph generated by MSTfromGraph is an MST of the graph,
  assuming that the vertices are numbered the same way.
  Prints feedback.
  
  Parameters:
    str graphfile: name of file containing graph to be tested
    int MSTweight:  weight of MST for this graph
  
  Returns nothing
  """
  print("-------  Test the generation of a MST for  " + graphfile + "  -------")
  graph = WeightedGraph.fromFile(dirPath+graphfile)
  print ("Graph read is:\n"+str(graph))
  tree = WeightedTree.MSTfromGraph(graph)
  if tree == None:
    print("This Graph has no MST")
    return
  print ("MSTfromGraph generated this graph of weight "+ str(tree.totalWeight()) + ":\n" + str(tree))
  if not tree.isSpanningtree(graph):
    print("It is not a spanning tree of graph read.")
  elif tree.totalWeight() != MSTweight:
    print("It is a non-minimum spanning tree of graph read.")
  else:       
    print("It is a minimum spanning tree of graph read.")

# calls main program
if __name__ == '__main__':
  main()
